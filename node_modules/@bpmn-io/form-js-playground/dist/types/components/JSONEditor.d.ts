export function JSONEditor(options?: {}): void;
export class JSONEditor {
    constructor(options?: {});
    setValue: (value: any) => void;
    getValue: () => string;
    on: {
        <Key extends import("mitt").EventType>(type: Key, handler: import("mitt").Handler<Record<import("mitt").EventType, unknown>[Key]>): void;
        (type: "*", handler: import("mitt").WildcardHandler<Record<import("mitt").EventType, unknown>>): void;
    };
    off: {
        <Key_1 extends import("mitt").EventType>(type: Key_1, handler?: import("mitt").Handler<Record<import("mitt").EventType, unknown>[Key_1]>): void;
        (type: "*", handler: import("mitt").WildcardHandler<Record<import("mitt").EventType, unknown>>): void;
    };
    attachTo: (container: any) => void;
    destroy: () => void;
}
